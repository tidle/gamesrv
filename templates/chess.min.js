const socket = io(); socket.on("connect", () => { socket.emit("chess get", { room: "{{ room }}" }), console.log("sent request") }), window.onload = function () { $("#pb").attr("disabled", !0), $("#pw").attr("disabled", !0); var o = new Chess, e = "s"; function t() { if ("w" === o.turn() ? $("#whom").html("It is white's turn") : $("#whom").html("It is black's turn"), o.history().length >= 1) { var e = o.history({ verbose: !0 }); console.log(e), e = e[e.length - 1], console.log(e), $("#board").find(".square-55d63").removeClass("highlight"), $("#board").find(".square-" + e.from).addClass("highlight"), $("#board").find(".square-" + e.to).addClass("highlight") } } var s = Chessboard("board", { draggable: !0, position: "start", onDragStart: function (o, t, o, o) { if (t[0] !== e) return !1 }, onDrop: function (t, s) { if (e !== o.turn()) return "snapback"; var n = o.move({ from: t, to: s, promotion: "q" }); if (null === n) return "snapback"; console.log("sent move", n.san), socket.emit("chess move", { room: "{{ room }}", move: n.san, color: n.color, fen: o.fen() }) }, onSnapEnd: function () { s.position(o.fen()), t() } }); socket.on("chess move", e => { console.log("got move", e.move), o.turn() == e.color && "{{ room }}" == e.room && (o.move(e.move), null !== o.move && s.position(o.fen())), setTimeout(function () { o.game_over() && (o.in_checkmate() ? alert("Checkmate!") : o.in_draw() ? alert("Draw!") : o.in_stalemate() && alert("Stalemate!")) }, 100), t() }), socket.on("chess get", e => { b = e.board, console.log("got data", e), "new" !== b && (s.position(b), o = new Chess(b)), $("#pb").attr("disabled", e.black), $("#pw").attr("disabled", e.white), $("#pwhite").html(e.wname), $("#pblack").html(e.bname), $("#status").removeClass("warning").addClass("status").html("Connected to server as a spectator"), setInterval(function () { socket.emit("chess reclock", "{{ room }}") }, 50), t() }), socket.on("chess jwhite", () => { e = "w", console.log("joined white"), s.orientation("white"), $("#status").html("Connected to server as white player") }), socket.on("chess jblack", () => { e = "b", console.log("joined black"), s.orientation("black"), $("#status").html("Connected to server as black player") }), socket.on("chess owhite", o => { "{{ room }}" === o.room && ($("#pw").attr("disabled", !0), $("#pwhite").html(o.name), console.log("owhite")) }), socket.on("chess oblack", o => { "{{ room }}" === o.room && ($("#pb").attr("disabled", !0), $("#pblack").html(o.name), console.log("oblack")) }), $("#pb").on("click", function () { socket.emit("chess jblack", { room: "{{ room }}", name: "{{ name }}" }), console.log("sent request") }), $("#pw").on("click", function () { socket.emit("chess jwhite", { room: "{{ room }}", name: "{{ name }}" }), console.log("sent request") }) };